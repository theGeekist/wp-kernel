#!/bin/sh

# Get list of staged files for conditional checks
STAGED_FILES=$(git diff --cached --name-only)

# Run lint-staged (formats and lints staged files)
pnpm lint-staged

# Detect what changed
HAS_SRC_CHANGES=$(echo "$STAGED_FILES" | grep -E 'packages/.*/src/.*\.(ts|tsx)' || true)
HAS_TEST_CHANGES=$(echo "$STAGED_FILES" | grep -E '\.(test|spec)\.(ts|tsx)$' || true)
HAS_DOC_CHANGES=$(echo "$STAGED_FILES" | grep -E '(docs/|typedoc\.json)' || true)

# TypeCheck tests only if test files changed
if [ -n "$HAS_TEST_CHANGES" ]; then
  echo "🔍 Type checking test files..."
  pnpm typecheck:tests || {
    echo ""
    echo "❌ TypeScript errors in test files. Please fix before committing."
    echo "💡 Run: pnpm typecheck:tests"
    echo ""
    exit 1
  }
fi

# Enforce test coverage before allowing commit (unchanged from original)
echo "🧪 Running tests with coverage threshold..."
pnpm test:coverage

# Build docs only if API or docs changed (using fast mode)
if [ -n "$HAS_SRC_CHANGES" ] || [ -n "$HAS_DOC_CHANGES" ]; then
  echo "📚 Building documentation (fast mode)..."
  pnpm docs:build:fast || {
    echo ""
    echo "❌ Documentation build failed."
    echo "💡 Run: pnpm docs:build"
    echo ""
    exit 1
  }
  
  # Restore docs folder (we just wanted to check it builds)
  git checkout docs/api/generated/
else
  echo "⏭️  Skipping docs build (no API or doc changes)"
fi

# Always format and normalize all markdown files
echo "🎨 Formatting markdown files..."
pnpm prettier --write '**/*.md' --log-level=error > /dev/null 2>&1
node scripts/normalize-punctuation.js > /dev/null 2>&1
git add '**/*.md'

# Check for changeset (only on feature branches)
BRANCH=$(git branch --show-current)
case "$BRANCH" in
  sprint-*|feat/*|fix/*)
    if [ -z "$(ls .changeset/*.md 2>/dev/null | grep -v README)" ]; then
      echo ""
      echo "⚠️  No changeset found. Consider: pnpm changeset"
      echo ""
    fi
    ;;
esac

# Clean up TypeScript build artifacts (but keep intentional .d.ts like global.d.ts)
find packages \( -path '*/src/*.d.ts' -o -path '*/src/**/*.d.ts' \) -type f -delete 2>/dev/null || true
find packages -name '.tsbuildinfo' -type f -delete 2>/dev/null || true
