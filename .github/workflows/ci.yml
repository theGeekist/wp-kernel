name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

# Cancel in-progress runs for the same branch
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

# Environment variables for caching
env:
    NODE_VERSION: '22.20.0'
    PNPM_VERSION: '9.12.3'

jobs:
    # Setup: Install dependencies once and cache for all jobs
    setup:
        name: Setup & Install Dependencies
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'

            - name: Cache node_modules
              id: cache-node-modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      app/*/node_modules
                  key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: |
                      node-modules-${{ runner.os }}-

            - name: Install dependencies
              if: steps.cache-node-modules.outputs.cache-hit != 'true'
              run: pnpm install --frozen-lockfile

    # Lint: Check code quality
    lint:
        name: Lint
        runs-on: ubuntu-latest
        needs: [setup, build]
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'pnpm'

            - name: Restore node_modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      app/*/node_modules
                  key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
                  fail-on-cache-miss: true

            - name: Restore build outputs
              uses: actions/cache@v4
              with:
                  path: |
                      packages/*/dist
                      packages/*/*.tsbuildinfo
                      app/*/build
                      app/*/dist
                  key: build-${{ runner.os }}-${{ hashFiles('packages/*/src/**', 'app/*/src/**', 'tsconfig*.json', 'pnpm-lock.yaml') }}
                  fail-on-cache-miss: true

            - name: Run ESLint
              run: pnpm lint

            - name: Check Prettier formatting
              run: pnpm format:check

            - name: TypeScript type check
              run: pnpm typecheck

    # Build: Ensure all packages build successfully
    build:
        name: Build
        runs-on: ubuntu-latest
        needs: setup
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Restore node_modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      app/*/node_modules
                  key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
                  fail-on-cache-miss: true

            - name: Cache build outputs
              id: cache-build
              uses: actions/cache@v4
              with:
                  path: |
                      packages/*/dist
                      packages/*/*.tsbuildinfo
                      app/*/build
                      app/*/dist
                  key: build-${{ runner.os }}-${{ hashFiles('packages/*/src/**', 'app/*/src/**', 'tsconfig*.json', 'pnpm-lock.yaml') }}
                  restore-keys: |
                      build-${{ runner.os }}-

            - name: Build packages
              if: steps.cache-build.outputs.cache-hit != 'true'
              run: pnpm build

            - name: Upload build artifacts (fallback)
              if: steps.cache-build.outputs.cache-hit != 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: |
                      packages/*/dist
                      app/*/build
                  retention-days: 1

    # Unit Tests: Run Jest tests
    unit-test:
        name: Unit Tests
        runs-on: ubuntu-latest
        needs: setup
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: ${{ env.PNPM_VERSION }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Restore node_modules
              uses: actions/cache@v4
              with:
                  path: |
                      node_modules
                      packages/*/node_modules
                      app/*/node_modules
                  key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
                  fail-on-cache-miss: true

            - name: Run unit tests with coverage
              run: pnpm test:coverage

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v4
              with:
                  files: ./coverage/lcov.info
                  flags: unittests
                  name: unit-tests
                  fail_ci_if_error: false

    # E2E Tests: Disabled temporarily (Sprint 1)
    # Reason: Takes too long to set up wp-env in CI (~3-5 minutes) for minimal test coverage
    # Will re-enable when we have comprehensive E2E tests (Sprint 2+)
    # To run locally: pnpm wp:fresh && pnpm e2e
    # e2e-test:
    #     name: E2E Tests
    #     runs-on: ubuntu-latest
    #     needs: [setup, build]
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4
    #
    #         - name: Setup pnpm
    #           uses: pnpm/action-setup@v4
    #           with:
    #               version: ${{ env.PNPM_VERSION }}
    #
    #         - name: Setup Node.js
    #           uses: actions/setup-node@v4
    #           with:
    #               node-version: ${{ env.NODE_VERSION }}
    #
    #         - name: Restore node_modules
    #           uses: actions/cache@v4
    #           with:
    #               path: |
    #                   node_modules
    #                   packages/*/node_modules
    #                   app/*/node_modules
    #               key: node-modules-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
    #               fail-on-cache-miss: true
    #
    #         # Get Playwright version for cache key (more accurate than lockfile hash)
    #         - name: Get Playwright version
    #           id: playwright-version
    #           run: echo "version=$(pnpm list @playwright/test --depth=0 --json | jq -r '.[0].devDependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT
    #
    #         # Cache Playwright browsers (~267MB, saves ~30s download time)
    #         # Cache key based on OS + Playwright version (invalidates when Playwright updates)
    #         - name: Cache Playwright browsers
    #           id: playwright-cache
    #           uses: actions/cache@v4
    #           with:
    #               path: ~/.cache/ms-playwright
    #               key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
    #               restore-keys: |
    #                   playwright-${{ runner.os }}-
    #
    #         # On cache miss: Download browsers + install system dependencies (~40s)
    #         - name: Install Playwright browsers and dependencies
    #           if: steps.playwright-cache.outputs.cache-hit != 'true'
    #           run: pnpm exec playwright install --with-deps chromium
    #
    #         # On cache hit: Only install system dependencies (fonts, libs, etc.) (~15s)
    #         # System deps must be reinstalled on each run (fresh VM)
    #         - name: Install Playwright system dependencies only
    #           if: steps.playwright-cache.outputs.cache-hit == 'true'
    #           run: pnpm exec playwright install-deps chromium
    #
    #         - name: Download build artifacts
    #           uses: actions/download-artifact@v4
    #           with:
    #               name: dist
    #
    #         - name: Restore build artifacts to packages
    #           run: |
    #               # The artifacts are downloaded flat, need to restore structure
    #               mkdir -p packages/kernel/dist packages/ui/dist packages/cli/dist packages/e2e-utils/dist
    #               mkdir -p app/showcase/build
    #               # Copy if artifacts exist (they should from the build job)
    #               if [ -d "packages" ]; then
    #                   cp -r packages/*/dist/* packages/ 2>/dev/null || true
    #                   cp -r app/*/build/* app/ 2>/dev/null || true
    #               fi
    #
    #         - name: Start WordPress (wp-env)
    #           run: pnpm wp:start
    #
    #         - name: Seed test data
    #           run: pnpm wp:seed
    #
    #         - name: Run E2E tests
    #           run: pnpm e2e --project=chromium
    #
    #         - name: Upload Playwright report
    #           if: failure()
    #           uses: actions/upload-artifact@v4
    #           with:
    #               name: playwright-report
    #               path: playwright-report/
    #               retention-days: 7
    #
    #         - name: Upload test results
    #           if: failure()
    #           uses: actions/upload-artifact@v4
    #           with:
    #               name: test-results
    #               path: test-results/
    #               retention-days: 7
    #               if-no-files-found: ignore

    # Changesets: Verify changeset exists for PRs
    changesets-check:
        name: Changesets Check
        runs-on: ubuntu-latest
        needs: setup
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check for changesets
              run: |
                  # Check if there are any changesets
                  if [ -z "$(ls .changeset/*.md 2>/dev/null | grep -v README)" ]; then
                    echo "⚠️ No changeset found. Please add a changeset for your changes."
                    echo "Run: pnpm changeset"
                    exit 1
                  else
                    echo "✅ Changeset found"
                  fi

    # All checks passed
    all-checks:
        name: All Checks Passed
        runs-on: ubuntu-latest
        needs: [lint, build, unit-test]
        if: always()
        steps:
            - name: Check status
              run: |
                  if [[ "${{ needs.lint.result }}" != "success" ]] || \
                     [[ "${{ needs.build.result }}" != "success" ]] || \
                     [[ "${{ needs.unit-test.result }}" != "success" ]]; then
                    echo "❌ One or more checks failed"
                    exit 1
                  fi
                  echo "✅ All checks passed!"
