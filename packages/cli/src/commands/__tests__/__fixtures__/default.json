{
	"blocks/auto-register.ts": "/**\n * AUTO-GENERATED by WP Kernel CLI.\n * Source: kernel.config.js → blocks.jsOnly\n */\nexport function registerGeneratedBlocks(): void {\n        // No JS-only blocks require auto-registration.\n}\n\nregisterGeneratedBlocks();\n",
	"blocks/job/block.json": "{\n  \"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n  \"apiVersion\": 3,\n  \"name\": \"demo-plugin/job\",\n  \"title\": \"Job\",\n  \"description\": \"Job block generated from project config\",\n  \"category\": \"widgets\",\n  \"icon\": \"database\",\n  \"textdomain\": \"demo-plugin\",\n  \"keywords\": [\n    \"job\"\n  ],\n  \"supports\": {\n    \"align\": [\n      \"wide\",\n      \"full\"\n    ],\n    \"color\": {\n      \"background\": true,\n      \"text\": true\n    },\n    \"spacing\": {\n      \"margin\": true,\n      \"padding\": true\n    },\n    \"typography\": {\n      \"fontSize\": true,\n      \"lineHeight\": true\n    }\n  },\n  \"editorScriptModule\": \"file:./index.tsx\",\n  \"viewScriptModule\": \"file:./view.ts\",\n  \"attributes\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"description\": \"Identifier\"\n    },\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"Title\"\n    }\n  }\n}\n",
	"blocks/job/index.tsx": "/* AUTO-GENERATED WPK STUB: safe to edit. */\nimport { registerBlockType } from '@wordpress/blocks';\n// Vite/tsconfig should allow JSON imports (.d.ts for JSON can be global)\nimport metadata from './block.json';\n\nfunction Edit() {\n  return <div>{ metadata.title || 'Block' } (edit)</div>;\n}\n\n// Saved HTML is final for JS-only blocks:\nconst save = () => (\n  <div>{ metadata.title || 'Block' } (save)</div>\n);\n\nregisterBlockType(metadata as any, { edit: Edit, save });\n",
	"blocks/job/view.ts": "/* AUTO-GENERATED WPK STUB: safe to edit.\n * Runs on the front-end when the block appears.\n */\nexport function initBlockView(root: HTMLElement) {\n  // Optional: hydrate interactivity\n  // console.log('Init view for', root);\n}\n",
	"php/index.php": "<?php\ndeclare(strict_types=1);\n\n/**\n * AUTO-GENERATED by WP Kernel CLI.\n * Edits between WPK:BEGIN AUTO and WPK:END AUTO will be overwritten.\n * Source: kernel.config.js → php/index\n */\n\nreturn [\n        'Demo\\Plugin\\Rest\\BaseController' => __DIR__ . '/Rest/BaseController.php',\n        'Demo\\Plugin\\Policy\\Policy' => __DIR__ . '/Policy/Policy.php',\n        'Demo\\Plugin\\Registration\\PersistenceRegistry' => __DIR__ . '/Registration/PersistenceRegistry.php',\n];\n",
	"php/Policy/Policy.php": "<?php\ndeclare(strict_types=1);\n\n/**\n * AUTO-GENERATED by WP Kernel CLI.\n * Edits between WPK:BEGIN AUTO and WPK:END AUTO will be overwritten.\n * Source: kernel.config.js → policy-map ([fallback])\n */\n\nnamespace Demo\\Plugin\\Policy;\n\nuse WP_Error;\nuse WP_REST_Request;\n\n// WPK:BEGIN AUTO\nfinal class Policy\n{\n        private const POLICY_MAP = [];\n\n        private const FALLBACK = [\n                'appliesTo' => 'resource',\n                'capability' => 'manage_options',\n        ];\n\n        /**\n         * Create a permission callback closure for a policy.\n         */\n        public static function callback( string $policy_key ): callable\n        {\n                return static function ( WP_REST_Request $request ) use ( $policy_key ) {\n                        return self::enforce( $policy_key, $request );\n                };\n        }\n\n        /**\n         * Evaluate a policy against the current user.\n         * @return bool|WP_Error\n         */\n        public static function enforce( string $policy_key, WP_REST_Request $request )\n        {\n                $definition = self::get_definition( $policy_key );\n                $capability = $definition['capability'] ?? self::FALLBACK['capability'];\n                $scope = $definition['appliesTo'] ?? self::FALLBACK['appliesTo'];\n\n                if ( 'object' === $scope ) {\n                        $binding = self::get_binding( $definition ) ?? 'id';\n                        $object_id = $request->get_param( $binding );\n                        if ( null === $object_id ) {\n                                return self::create_error( 'wpk_policy_object_missing', sprintf( 'Object identifier parameter \"%s\" missing for policy \"%s\".', $binding, $policy_key ) );\n                        }\n\n                        $allowed = current_user_can( $capability, $object_id );\n                } else {\n                        $allowed = current_user_can( $capability );\n                }\n\n                if ( $allowed ) {\n                        return true;\n                }\n\n                return self::create_error( 'wpk_policy_denied', 'You are not allowed to perform this action.', array( 'policy' => $policy_key, 'capability' => $capability ) );\n        }\n\n        /**\n         * Retrieve the configuration for a policy key.\n         */\n        private static function get_definition( string $policy_key ): array\n        {\n                if ( isset( self::POLICY_MAP[ $policy_key ] ) ) {\n                        return self::POLICY_MAP[ $policy_key ];\n                }\n\n                return self::FALLBACK;\n        }\n\n        /**\n         * Resolve the request parameter used for object policies.\n         */\n        private static function get_binding( array $definition ): ?string\n        {\n                $binding = $definition['binding'] ?? null;\n                if ( is_string( $binding ) && $binding !== '' ) {\n                        return $binding;\n                }\n\n                return null;\n        }\n\n        /**\n         * Create a consistent WP_Error instance for policy failures.\n         */\n        private static function create_error( string $code, string $message, array $context = array() ): WP_Error\n        {\n                $payload = array_merge(\n                        array( 'status' => 403 ),\n                        $context\n                );\n\n                return new WP_Error( $code, $message, $payload );\n        }\n\n}\n// WPK:END AUTO\n",
	"php/Registration/PersistenceRegistry.php": "<?php\ndeclare(strict_types=1);\n\n/**\n * AUTO-GENERATED by WP Kernel CLI.\n * Edits between WPK:BEGIN AUTO and WPK:END AUTO will be overwritten.\n * Source: kernel.config.js → resources (storage + identity metadata)\n */\n\nnamespace Demo\\Plugin\\Registration;\n\n// WPK:BEGIN AUTO\nfinal class PersistenceRegistry\n{\n        public static function get_config(): array\n        {\n                return [\n                        'resources' => [\n                                'job' => [\n                                        'identity' => [\n                                                'param' => 'id',\n                                                'type' => 'number',\n                                        ],\n                                        'storage' => [\n                                                'mode' => 'wp-post',\n                                                'postType' => 'job',\n                                        ],\n                                ],\n                        ],\n                ];\n        }\n}\n// WPK:END AUTO\n",
	"php/Rest/BaseController.php": "<?php\ndeclare(strict_types=1);\n\n/**\n * AUTO-GENERATED by WP Kernel CLI.\n * Edits between WPK:BEGIN AUTO and WPK:END AUTO will be overwritten.\n * Source: kernel.config.js → resources (namespace: demo-plugin)\n */\n\nnamespace Demo\\Plugin\\Rest;\n\n// WPK:BEGIN AUTO\nabstract class BaseController\n{\n        public function get_namespace(): string\n        {\n                return 'demo-plugin';\n        }\n}\n// WPK:END AUTO\n",
	"types/index.d.ts": "/**\n * AUTO-GENERATED by WP Kernel CLI.\n * Changes within this file will be overwritten. Regenerate via the CLI.\n * Source: kernel.config.js → schemas\n */\n\nexport type { Job } from './job';\n",
	"types/job.d.ts": "export interface Schema {}\n"
}
