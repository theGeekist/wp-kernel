<?php
declare(strict_types=1);

/**
 * AUTO-GENERATED by WP Kernel CLI.
 * Edits between WPK:BEGIN AUTO and WPK:END AUTO will be overwritten.
 * Source: kernel.config.ts â†’ policy-map ([fallback])
 */

namespace WP\Kernel\Showcase\Policy;

use WP_Error;
use WP_REST_Request;

// WPK:BEGIN AUTO
final class Policy
{
    private const POLICY_MAP = [];

    private const FALLBACK = [
        "appliesTo" => "resource",
        "capability" => "manage_options",
    ];

    /**
     * Create a permission callback closure for a policy.
     */
    public static function callback(string $policy_key): callable
    {
        return static function (WP_REST_Request $request) use ($policy_key) {
            return self::enforce($policy_key, $request);
        };
    }

    /**
     * Evaluate a policy against the current user.
     * @return bool|WP_Error
     */
    public static function enforce(string $policy_key, WP_REST_Request $request)
    {
        $definition = self::get_definition($policy_key);
        $capability = $definition["capability"] ?? self::FALLBACK["capability"];
        $scope = $definition["appliesTo"] ?? self::FALLBACK["appliesTo"];

        if ("object" === $scope) {
            $binding = self::get_binding($definition) ?? "id";
            $object_id = $request->get_param($binding);
            if (null === $object_id) {
                return self::create_error(
                    "wpk_policy_object_missing",
                    sprintf(
                        'Object identifier parameter "%s" missing for policy "%s".',
                        $binding,
                        $policy_key,
                    ),
                );
            }

            $allowed = current_user_can($capability, $object_id);
        } else {
            $allowed = current_user_can($capability);
        }

        if ($allowed) {
            return true;
        }

        return self::create_error(
            "wpk_policy_denied",
            "You are not allowed to perform this action.",
            ["policy" => $policy_key, "capability" => $capability],
        );
    }

    /**
     * Retrieve the configuration for a policy key.
     */
    private static function get_definition(string $policy_key): array
    {
        if (isset(self::POLICY_MAP[$policy_key])) {
            return self::POLICY_MAP[$policy_key];
        }

        return self::FALLBACK;
    }

    /**
     * Resolve the request parameter used for object policies.
     */
    private static function get_binding(array $definition): ?string
    {
        $binding = $definition["binding"] ?? null;
        if (is_string($binding) && $binding !== "") {
            return $binding;
        }

        return null;
    }

    /**
     * Create a consistent WP_Error instance for policy failures.
     */
    private static function create_error(
        string $code,
        string $message,
        array $context = [],
    ): WP_Error {
        $payload = array_merge(["status" => 403], $context);

        return new WP_Error($code, $message, $payload);
    }
}
// WPK:END AUTO
