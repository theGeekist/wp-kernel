<?php
declare(strict_types=1);

/**
 * AUTO-GENERATED by WP Kernel CLI.
 * Edits between WPK:BEGIN AUTO and WPK:END AUTO will be overwritten.
 * Source: kernel.config.ts â†’ resources.job
 * Schema: auto:job (auto)
 * Route: [DELETE] /wp-kernel-showcase/v1/jobs/:id
 * Route: [GET] /wp-kernel-showcase/v1/jobs
 * Route: [GET] /wp-kernel-showcase/v1/jobs/:id
 * Route: [POST] /wp-kernel-showcase/v1/jobs
 * Route: [PUT] /wp-kernel-showcase/v1/jobs/:id
 */

namespace WPKernel\Showcase\Rest;

use WP_Error;
use WP_Post;
use WP_Query;
use WP_REST_Request;
use WPKernel\Showcase\Policy\Policy;

// WPK:BEGIN AUTO
class JobController extends BaseController
{
    public function get_resource_name(): string
    {
        return "job";
    }

    public function get_schema_key(): string
    {
        return "auto:job";
    }

    public function get_rest_args(): array
    {
        return [
            "apply_deadline" => [
                "schema" => [
                    "type" => "string",
                ],
            ],
            "department" => [
                "description" => "Department filter derived from taxonomy.",
                "schema" => [
                    "type" => "string",
                ],
            ],
            "job_type" => [
                "schema" => [
                    "type" => "string",
                ],
            ],
            "location" => [
                "description" => "Location filter derived from taxonomy.",
                "schema" => [
                    "type" => "string",
                ],
            ],
            "remote_policy" => [
                "schema" => [
                    "type" => "string",
                ],
            ],
            "salary_max" => [
                "schema" => [
                    "type" => "integer",
                ],
            ],
            "salary_min" => [
                "schema" => [
                    "type" => "integer",
                ],
            ],
            "seniority" => [
                "schema" => [
                    "type" => "string",
                ],
            ],
            "cursor" => [
                "description" => "Opaque cursor for pagination.",
                "schema" => [
                    "type" => "string",
                ],
            ],
            "q" => [
                "description" => "Freeform search query.",
                "schema" => [
                    "type" => "string",
                ],
            ],
            "status" => [
                "schema" => [
                    "enum" => ["draft", "publish", "closed"],
                    "type" => "string",
                ],
            ],
        ];
    }

    /**
     * Handle [DELETE] /wp-kernel-showcase/v1/jobs/:id.
     */
    public function deleteV1JobsId(WP_REST_Request $request)
    {
        $permission = Policy::enforce("jobs.delete", $request);
        if (is_wp_error($permission)) {
            return $permission;
        }

        $id = $request->get_param("id");
        if (null === $id) {
            return new WP_Error(
                "wpk_job_missing_identifier",
                "Missing identifier for Job.",
                ["status" => 400],
            );
        }
        $id = (int) $id;
        if ($id <= 0) {
            return new WP_Error(
                "wpk_job_invalid_identifier",
                "Invalid identifier for Job.",
                ["status" => 400],
            );
        }

        $post = $this->resolveJobPost($id);
        if (!$post instanceof WP_Post) {
            return new WP_Error("wpk_job_not_found", "Job not found.", [
                "status" => 404,
            ]);
        }

        $previous = $this->prepareJobResponse($post, $request);
        $deleted = wp_delete_post($post->ID, true);
        if (false === $deleted) {
            return new WP_Error(
                "wpk_job_delete_failed",
                "Unable to delete Job.",
                ["status" => 500],
            );
        }

        return [
            "deleted" => true,
            "id" => (int) $post->ID,
            "previous" => $previous,
        ];
    }

    /**
     * Handle [GET] /wp-kernel-showcase/v1/jobs.
     */
    public function getV1Jobs(WP_REST_Request $request)
    {
        $post_type = $this->getJobPostType();
        $per_page = (int) $request->get_param("per_page");
        if ($per_page <= 0) {
            $per_page = 10;
        }
        if ($per_page > 100) {
            $per_page = 100;
        }

        $statuses = $this->getJobStatuses();
        $query_args = [
            "post_type" => $post_type,
            "post_status" => $statuses,
            "fields" => "ids",
            "paged" => max(1, (int) $request->get_param("page")),
            "posts_per_page" => $per_page,
        ];

        $meta_query = [];
        $departmentMeta = $request->get_param("department");
        if (null !== $departmentMeta) {
            if (!is_scalar($departmentMeta)) {
                continue;
            }
            $departmentMeta = trim((string) $departmentMeta);
            if ("" === $departmentMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "department",
                "compare" => "=",
                "value" => $departmentMeta,
            ];
        }
        $locationMeta = $request->get_param("location");
        if (null !== $locationMeta) {
            if (!is_scalar($locationMeta)) {
                continue;
            }
            $locationMeta = trim((string) $locationMeta);
            if ("" === $locationMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "location",
                "compare" => "=",
                "value" => $locationMeta,
            ];
        }
        $seniorityMeta = $request->get_param("seniority");
        if (null !== $seniorityMeta) {
            if (!is_scalar($seniorityMeta)) {
                continue;
            }
            $seniorityMeta = trim((string) $seniorityMeta);
            if ("" === $seniorityMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "seniority",
                "compare" => "=",
                "value" => $seniorityMeta,
            ];
        }
        $job_typeMeta = $request->get_param("job_type");
        if (null !== $job_typeMeta) {
            if (!is_scalar($job_typeMeta)) {
                continue;
            }
            $job_typeMeta = trim((string) $job_typeMeta);
            if ("" === $job_typeMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "job_type",
                "compare" => "=",
                "value" => $job_typeMeta,
            ];
        }
        $remote_policyMeta = $request->get_param("remote_policy");
        if (null !== $remote_policyMeta) {
            if (!is_scalar($remote_policyMeta)) {
                continue;
            }
            $remote_policyMeta = trim((string) $remote_policyMeta);
            if ("" === $remote_policyMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "remote_policy",
                "compare" => "=",
                "value" => $remote_policyMeta,
            ];
        }
        $salary_minMeta = $request->get_param("salary_min");
        if (null !== $salary_minMeta) {
            if (!is_scalar($salary_minMeta)) {
                continue;
            }
            $salary_minMeta = trim((string) $salary_minMeta);
            if ("" === $salary_minMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "salary_min",
                "compare" => "=",
                "value" => $salary_minMeta,
            ];
        }
        $salary_maxMeta = $request->get_param("salary_max");
        if (null !== $salary_maxMeta) {
            if (!is_scalar($salary_maxMeta)) {
                continue;
            }
            $salary_maxMeta = trim((string) $salary_maxMeta);
            if ("" === $salary_maxMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "salary_max",
                "compare" => "=",
                "value" => $salary_maxMeta,
            ];
        }
        $apply_deadlineMeta = $request->get_param("apply_deadline");
        if (null !== $apply_deadlineMeta) {
            if (!is_scalar($apply_deadlineMeta)) {
                continue;
            }
            $apply_deadlineMeta = trim((string) $apply_deadlineMeta);
            if ("" === $apply_deadlineMeta) {
                continue;
            }
            $meta_query[] = [
                "key" => "apply_deadline",
                "compare" => "=",
                "value" => $apply_deadlineMeta,
            ];
        }
        if (!empty($meta_query)) {
            $query_args["meta_query"] = $meta_query;
        }

        $tax_query = [];
        $departmentTerms = $request->get_param("department");
        if (null !== $departmentTerms) {
            if (!is_array($departmentTerms)) {
                $departmentTerms = [$departmentTerms];
            }
            $departmentTerms = array_filter(
                array_map("intval", (array) $departmentTerms),
            );
            if (empty($departmentTerms)) {
                continue;
            }
            $tax_query[] = [
                "taxonomy" => "wpk_job_department",
                "field" => "term_id",
                "terms" => $departmentTerms,
            ];
        }
        $locationTerms = $request->get_param("location");
        if (null !== $locationTerms) {
            if (!is_array($locationTerms)) {
                $locationTerms = [$locationTerms];
            }
            $locationTerms = array_filter(
                array_map("intval", (array) $locationTerms),
            );
            if (empty($locationTerms)) {
                continue;
            }
            $tax_query[] = [
                "taxonomy" => "wpk_job_location",
                "field" => "term_id",
                "terms" => $locationTerms,
            ];
        }
        if (!empty($tax_query)) {
            $query_args["tax_query"] = $tax_query;
        }

        $query = new WP_Query($query_args);
        $items = [];

        foreach ($query->posts as $post_id) {
            $post = get_post($post_id);
            if (!$post instanceof WP_Post) {
                continue;
            }

            $items[] = $this->prepareJobResponse($post, $request);
        }

        return [
            "items" => $items,
            "total" => (int) $query->found_posts,
            "pages" => (int) $query->max_num_pages,
        ];
    }

    /**
     * Handle [GET] /wp-kernel-showcase/v1/jobs/:id.
     */
    public function getV1JobsId(WP_REST_Request $request)
    {
        $id = $request->get_param("id");
        if (null === $id) {
            return new WP_Error(
                "wpk_job_missing_identifier",
                "Missing identifier for Job.",
                ["status" => 400],
            );
        }
        $id = (int) $id;
        if ($id <= 0) {
            return new WP_Error(
                "wpk_job_invalid_identifier",
                "Invalid identifier for Job.",
                ["status" => 400],
            );
        }

        $post = $this->resolveJobPost($id);
        if (!$post instanceof WP_Post) {
            return new WP_Error("wpk_job_not_found", "Job not found.", [
                "status" => 404,
            ]);
        }

        return $this->prepareJobResponse($post, $request);
    }

    /**
     * Handle [POST] /wp-kernel-showcase/v1/jobs.
     */
    public function postV1Jobs(WP_REST_Request $request)
    {
        $permission = Policy::enforce("jobs.create", $request);
        if (is_wp_error($permission)) {
            return $permission;
        }

        $post_type = $this->getJobPostType();

        $status = $request->get_param("status");
        $post_status = $this->normaliseJobStatus($status);
        $post_data = [
            "post_type" => $post_type,
            "post_status" => $post_status,
        ];
        $title = $request->get_param("title");
        if (is_string($title)) {
            $post_data["post_title"] = $title;
        }
        $content = $request->get_param("content");
        if (is_string($content)) {
            $post_data["post_content"] = $content;
        }

        $post_id = wp_insert_post($post_data, true);
        if (is_wp_error($post_id)) {
            return $post_id;
        }

        $this->syncJobMeta($post_id, $request);
        $taxonomy_result = $this->syncJobTaxonomies($post_id, $request);
        if (is_wp_error($taxonomy_result)) {
            return $taxonomy_result;
        }

        $post = get_post($post_id);
        if (!$post instanceof WP_Post) {
            return new WP_Error(
                "wpk_job_load_failed",
                "Unable to load created Job.",
                ["status" => 500],
            );
        }

        return $this->prepareJobResponse($post, $request);
    }

    /**
     * Handle [PUT] /wp-kernel-showcase/v1/jobs/:id.
     */
    public function putV1JobsId(WP_REST_Request $request)
    {
        $permission = Policy::enforce("jobs.update", $request);
        if (is_wp_error($permission)) {
            return $permission;
        }

        $id = $request->get_param("id");
        if (null === $id) {
            return new WP_Error(
                "wpk_job_missing_identifier",
                "Missing identifier for Job.",
                ["status" => 400],
            );
        }
        $id = (int) $id;
        if ($id <= 0) {
            return new WP_Error(
                "wpk_job_invalid_identifier",
                "Invalid identifier for Job.",
                ["status" => 400],
            );
        }

        $post = $this->resolveJobPost($id);
        if (!$post instanceof WP_Post) {
            return new WP_Error("wpk_job_not_found", "Job not found.", [
                "status" => 404,
            ]);
        }

        $post_data = [
            "ID" => $post->ID,
            "post_type" => $this->getJobPostType(),
        ];

        $status = $request->get_param("status");
        if (null !== $status) {
            $post_data["post_status"] = $this->normaliseJobStatus($status);
        }

        $title = $request->get_param("title");
        if (is_string($title)) {
            $post_data["post_title"] = $title;
        }
        $content = $request->get_param("content");
        if (is_string($content)) {
            $post_data["post_content"] = $content;
        }

        $result = wp_update_post($post_data, true);
        if (is_wp_error($result)) {
            return $result;
        }

        $this->syncJobMeta($post->ID, $request);
        $taxonomy_result = $this->syncJobTaxonomies($post->ID, $request);
        if (is_wp_error($taxonomy_result)) {
            return $taxonomy_result;
        }

        $updated = get_post($post->ID);
        if (!$updated instanceof WP_Post) {
            return new WP_Error(
                "wpk_job_load_failed",
                "Unable to load updated Job.",
                ["status" => 500],
            );
        }

        return $this->prepareJobResponse($updated, $request);
    }

    private function getJobPostType(): string
    {
        return "wpk_job";
    }

    private function getJobStatuses(): array
    {
        return ["closed"];
    }

    private function getJobDefaultStatus(): string
    {
        return "closed";
    }

    private function normaliseJobStatus($status): string
    {
        if (!is_string($status) || "" === trim($status)) {
            return $this->getJobDefaultStatus();
        }
        $status = strtolower(trim($status));
        $allowed = $this->getJobStatuses();
        if (empty($allowed)) {
            return $status;
        }
        if (in_array($status, $allowed, true)) {
            return $status;
        }
        return $this->getJobDefaultStatus();
    }

    private function resolveJobPost($identity): ?WP_Post
    {
        $post_type = $this->getJobPostType();
        if (is_numeric($identity)) {
            $post = get_post((int) $identity);
            if ($post instanceof WP_Post && $post->post_type === $post_type) {
                return $post;
            }
        }
        if (is_string($identity)) {
            $candidate = trim((string) $identity);
            if ("" !== $candidate) {
                $post = get_page_by_path($candidate, OBJECT, $post_type);
                if ($post instanceof WP_Post) {
                    return $post;
                }
                $statuses = $this->getJobStatuses();
                if (empty($statuses)) {
                    $statuses = "any";
                }
                $results = get_posts([
                    "name" => $candidate,
                    "post_type" => $post_type,
                    "post_status" => $statuses,
                    "posts_per_page" => 1,
                ]);
                if (!empty($results)) {
                    $post = $results[0];
                    if (!($post instanceof WP_Post)) {
                        $post = get_post($post);
                    }
                    if ($post instanceof WP_Post) {
                        return $post;
                    }
                }
            }
        }
        return null;
    }

    private function prepareJobResponse(
        WP_Post $post,
        WP_REST_Request $request,
    ): array {
        $data = [
            "id" => (int) $post->ID,
            "status" => (string) $post->post_status,
        ];
        $data["title"] = (string) $post->post_title;
        $data["content"] = (string) $post->post_content;
        $departmentMeta = get_post_meta($post->ID, "department", true);
        $departmentMeta = is_string($departmentMeta)
            ? $departmentMeta
            : (string) $departmentMeta;
        $data["department"] = $departmentMeta;
        $locationMeta = get_post_meta($post->ID, "location", true);
        $locationMeta = is_string($locationMeta)
            ? $locationMeta
            : (string) $locationMeta;
        $data["location"] = $locationMeta;
        $seniorityMeta = get_post_meta($post->ID, "seniority", true);
        $seniorityMeta = is_string($seniorityMeta)
            ? $seniorityMeta
            : (string) $seniorityMeta;
        $data["seniority"] = $seniorityMeta;
        $job_typeMeta = get_post_meta($post->ID, "job_type", true);
        $job_typeMeta = is_string($job_typeMeta)
            ? $job_typeMeta
            : (string) $job_typeMeta;
        $data["job_type"] = $job_typeMeta;
        $remote_policyMeta = get_post_meta($post->ID, "remote_policy", true);
        $remote_policyMeta = is_string($remote_policyMeta)
            ? $remote_policyMeta
            : (string) $remote_policyMeta;
        $data["remote_policy"] = $remote_policyMeta;
        $salary_minMeta = get_post_meta($post->ID, "salary_min", true);
        $salary_minMeta = is_numeric($salary_minMeta)
            ? (int) $salary_minMeta
            : 0;
        $data["salary_min"] = $salary_minMeta;
        $salary_maxMeta = get_post_meta($post->ID, "salary_max", true);
        $salary_maxMeta = is_numeric($salary_maxMeta)
            ? (int) $salary_maxMeta
            : 0;
        $data["salary_max"] = $salary_maxMeta;
        $apply_deadlineMeta = get_post_meta($post->ID, "apply_deadline", true);
        $apply_deadlineMeta = is_string($apply_deadlineMeta)
            ? $apply_deadlineMeta
            : (string) $apply_deadlineMeta;
        $data["apply_deadline"] = $apply_deadlineMeta;
        $departmentTerms = wp_get_object_terms(
            $post->ID,
            "wpk_job_department",
            ["fields" => "ids"],
        );
        if (is_wp_error($departmentTerms)) {
            $departmentTerms = [];
        }
        $departmentTerms = array_map("intval", (array) $departmentTerms);
        $data["department"] = $departmentTerms;
        $locationTerms = wp_get_object_terms($post->ID, "wpk_job_location", [
            "fields" => "ids",
        ]);
        if (is_wp_error($locationTerms)) {
            $locationTerms = [];
        }
        $locationTerms = array_map("intval", (array) $locationTerms);
        $data["location"] = $locationTerms;
        return $data;
    }

    private function syncJobMeta(int $post_id, WP_REST_Request $request): void
    {
        $departmentMeta = $request->get_param("department");
        if (null !== $departmentMeta) {
            $departmentMeta = is_string($departmentMeta)
                ? $departmentMeta
                : (string) $departmentMeta;
            update_post_meta($post_id, "department", $departmentMeta);
        }
        $locationMeta = $request->get_param("location");
        if (null !== $locationMeta) {
            $locationMeta = is_string($locationMeta)
                ? $locationMeta
                : (string) $locationMeta;
            update_post_meta($post_id, "location", $locationMeta);
        }
        $seniorityMeta = $request->get_param("seniority");
        if (null !== $seniorityMeta) {
            $seniorityMeta = is_string($seniorityMeta)
                ? $seniorityMeta
                : (string) $seniorityMeta;
            update_post_meta($post_id, "seniority", $seniorityMeta);
        }
        $job_typeMeta = $request->get_param("job_type");
        if (null !== $job_typeMeta) {
            $job_typeMeta = is_string($job_typeMeta)
                ? $job_typeMeta
                : (string) $job_typeMeta;
            update_post_meta($post_id, "job_type", $job_typeMeta);
        }
        $remote_policyMeta = $request->get_param("remote_policy");
        if (null !== $remote_policyMeta) {
            $remote_policyMeta = is_string($remote_policyMeta)
                ? $remote_policyMeta
                : (string) $remote_policyMeta;
            update_post_meta($post_id, "remote_policy", $remote_policyMeta);
        }
        $salary_minMeta = $request->get_param("salary_min");
        if (null !== $salary_minMeta) {
            $salary_minMeta = is_numeric($salary_minMeta)
                ? (int) $salary_minMeta
                : 0;
            update_post_meta($post_id, "salary_min", $salary_minMeta);
        }
        $salary_maxMeta = $request->get_param("salary_max");
        if (null !== $salary_maxMeta) {
            $salary_maxMeta = is_numeric($salary_maxMeta)
                ? (int) $salary_maxMeta
                : 0;
            update_post_meta($post_id, "salary_max", $salary_maxMeta);
        }
        $apply_deadlineMeta = $request->get_param("apply_deadline");
        if (null !== $apply_deadlineMeta) {
            $apply_deadlineMeta = is_string($apply_deadlineMeta)
                ? $apply_deadlineMeta
                : (string) $apply_deadlineMeta;
            update_post_meta($post_id, "apply_deadline", $apply_deadlineMeta);
        }
    }

    private function syncJobTaxonomies(int $post_id, WP_REST_Request $request)
    {
        $result = true;
        $departmentTerms = $request->get_param("department");
        if (null !== $departmentTerms) {
            if (!is_array($departmentTerms)) {
                $departmentTerms = [$departmentTerms];
            }
            $departmentTerms = array_filter(
                array_map("intval", (array) $departmentTerms),
            );
            $result = wp_set_object_terms(
                $post_id,
                $departmentTerms,
                "wpk_job_department",
                false,
            );
            if (is_wp_error($result)) {
                return $result;
            }
        }
        $locationTerms = $request->get_param("location");
        if (null !== $locationTerms) {
            if (!is_array($locationTerms)) {
                $locationTerms = [$locationTerms];
            }
            $locationTerms = array_filter(
                array_map("intval", (array) $locationTerms),
            );
            $result = wp_set_object_terms(
                $post_id,
                $locationTerms,
                "wpk_job_location",
                false,
            );
            if (is_wp_error($result)) {
                return $result;
            }
        }
        return $result;
    }
}
// WPK:END AUTO
